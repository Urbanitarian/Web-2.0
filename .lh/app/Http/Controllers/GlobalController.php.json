{
    "sourceFile": "app/Http/Controllers/GlobalController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1683377145690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1683377145690,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\Tag;\nuse App\\Models\\Dictionary;\nuse App\\Models\\Magazine;\nuse App\\Models\\Pages;\nuse App\\Models\\Streetscape;\nuse App\\Models\\Masterplan;\nuse App\\Models\\Team;\nuse App\\Models\\Neighbourhood;\nuse App\\Models\\Webresource;\nuse App\\Models\\Country;\nuse App\\Models\\City;\nuse App\\Models\\Mindscape;\nuse App\\Imports\\MasterplansImport;\nuse App\\Imports\\StreetscapesImport;\nuse App\\Imports\\NeighbourhoodsImport;\nuse App\\Imports\\DictionariesImport;\nuse App\\Imports\\MagazinesImport;\nuse App\\Imports\\WebresourcesImport;\nuse Maatwebsite\\Excel\\Facades\\Excel;\nuse Backpack\\Settings\\app\\Models\\Setting;\nuse Carbon\\Carbon;\nuse App\\Mail\\MyMailsubmit;\nuse Backpack\\CRUD\\app\\Http\\Controllers\\CrudController;\nuse Backpack\\CRUD\\app\\Library\\CrudPanel\\CrudPanelFacade as CRUD;\nuse Pestopancake\\LaravelBackpackNotifications\\Notifications\\DatabaseNotification;\nuse Illuminate\\Contracts\\Pagination\\Paginator;\nuse Illuminate\\Contracts\\View\\View;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Pagination\\LengthAwarePaginator;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Mail;\nuse Illuminate\\Support\\Facades\\Session;\n\nclass GlobalController extends Controller\n{\n    /**\n     * Handle the incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function getAll(Request $request)\n    {\n        $tags = request()->input('tags');\n        $size = request()->input('size');\n        $status = request()->input('status');\n        $city = request()->input('city');\n        $country = request()->input('country');\n        $category = request()->input('category');\n        $popular = request()->input('popular');\n        $q = request()->input('q');\n\n\n\n        if ($request->filled('q')) { \n            $masters = Masterplan::where('title','like','%' . $q . '%')->orWhere('tags', 'like', '%' . $q . '%')->orWhere('category', 'like', '%' . $q . '%')->orWhere('city', 'like', '%' . $q . '%')->orWhere('country', 'like', '%' . $q . '%')->get();\n            $streets = Streetscape::where('title','like','%' . $q . '%')->orWhere('tags', 'like', '%' . $q . '%')->orWhere('category', 'like', '%' . $q . '%')->orWhere('city', 'like', '%' . $q . '%')->orWhere('country', 'like', '%' . $q . '%')->get();\n            $neighbs = Neighbourhood::where('title','like','%' . $q . '%')->orWhere('tags', 'like', '%' . $q . '%')->orWhere('category', 'like', '%' . $q . '%')->orWhere('city', 'like', '%' . $q . '%')->orWhere('country', 'like', '%' . $q . '%')->get();\n        }\n        elseif ($request->filled('tags')) { \n            $tags = explode(',', $tags);\n            $masters = Masterplan::whereIn('tags', $tags)->get();\n            $streets = Streetscape::whereIn('tags', $tags)->get();\n            $neighbs = Neighbourhood::whereIn('tags', $tags)->get();\n        } elseif ($request->filled('size')) \n        { \n            $masters = Masterplan::where('size', '=', $size)->get();\n            $streets = Streetscape::where('size', '=', $size)->get();\n            $neighbs = Neighbourhood::where('size', '=', $size)->get();\n        } \n        elseif ($request->filled('status')) \n        { \n            $masters = Masterplan::where('status', '=', $status)->get();\n            $streets = Streetscape::where('status', '=', $status)->get();\n            $neighbs = Neighbourhood::where('status', '=', $status)->get();\n        } elseif ($request->filled('city')) \n        { \n            $masters = Masterplan::where('city', '=', $city)->get();\n            $streets = Streetscape::where('city', '=', $city)->get();\n            $neighbs = Neighbourhood::where('city', '=', $city)->get();\n        } elseif ($request->filled('country')) \n        { \n            $masters = Masterplan::where('country', '=', $country)->get();\n            $streets = Streetscape::where('country', '=', $country)->get();\n            $neighbs = Neighbourhood::where('country', '=', $country)->get();\n        }  elseif ($request->filled('category')) \n        { \n            if ($category == 'All') {\n                $masters = Masterplan::all();\n                $streets = Streetscape::all();\n                $neighbs = Neighbourhood::all();\n            } else {\n                $masters = Masterplan::where('category', '=', $category)->get();\n                $streets = Streetscape::where('category', '=', $category)->get();\n                $neighbs = Neighbourhood::where('category', '=', $category)->get();\n            }\n        } elseif ($request->filled('popular')) \n        { \n            if ($popular == 'new') {\n                $masters = Masterplan::orderBy('id', 'desc')->get();\n                $streets = Streetscape::orderBy('id', 'desc')->get();\n                $neighbs = Neighbourhood::orderBy('id', 'desc')->get();\n            }\n            else if ($popular == 'old'){\n                $masters = Masterplan::orderBy('id', 'asc')->get();\n                $streets = Streetscape::orderBy('id', 'asc')->get();\n                $neighbs = Neighbourhood::orderBy('id', 'asc')->get();\n            }\n           \n        } else\n        {\n            $masters = Masterplan::all();\n            $streets = Streetscape::all();\n            $neighbs = Neighbourhood::all();\n        }\n \n         //count number of masterplan\n            $masternum = Masterplan::where('active', '1')->count();\n            $streetnum = Streetscape::where('active', '1')->count();\n            $urbannum = Neighbourhood::where('active', '1')->count();\n          \n\n        $all_data = array_merge(\n            $masters->toArray(),\n            $streets->toArray(),\n            $neighbs->toArray()\n        );\n        shuffle($all_data);\n\n        $units = new LengthAwarePaginator(\n            array_slice($all_data, 0, 8, true),\n            count($all_data),\n            8\n        );\n\n\n        //other parts\n        $cities = City::all();\n        $countries = Country::All();\n        $neighbourhoods = neighbourhood::where('id', '!=', null)->limit(4)->inRandomOrder()->get();\n        $masterplans = Masterplan::where('id', '!=', null)->limit(8)->inRandomOrder()->get();\n        $streetscapes = Streetscape::where('id', '!=', null)->limit(3)->inRandomOrder()->get();\n        $webresources = Webresource::where('id', '!=', null)->limit(5)->inRandomOrder()->get();\n        $magazines = Magazine::where('id', '!=', null)->limit(5)->inRandomOrder()->get();\n        $dictionary = Dictionary::where('id', '!=', null)->limit(10)->inRandomOrder()->get();\n        $insta = Setting::get('curator_link');\n\n        return view(\n            'index',\n            compact('dictionary','magazines','webresources','insta','streetscapes','masterplans','countries','cities','neighbourhoods','units', 'all_data', 'masternum', 'streetnum', 'urbannum'\n            )\n        );\n    }\n\n    static function alldata(){\n\n        $masters = Masterplan::all();\n        $streets = Streetscape::all();\n        $neighbs = Neighbourhood::all();\n\n        $all_data = array_merge(\n            $masters->toArray(),\n            $streets->toArray(),\n            $neighbs->toArray()\n        );\n\n        return $all_data;\n    }\n\n\n    static function pages()\n    {\n        $pages = Pages::all();\n        return $pages;\n    }\n\n    public function about()\n    {\n      \n        return view('about');\n    }\n\n    public function people()\n    {\n        $team = Team::all()->sortByDesc('id');\n\n        return view('people' , compact('team'));\n    }\n\n    public function contact()\n    {\n        return view('contact');\n    }\n\n       public function submit()\n    {\n        return view('submit');\n    }\n\n    public function submit_project(Request $request)\n    {\n        $usermail = env('MAIL_USERNAME');\n        $this->validate($request, [\n            'name' => 'required',\n            'email' => 'required|email',\n            'g-recaptcha-response' => 'required|recaptchav3:register,0.5'\n        ]);\n\n        Mail::to($usermail)->queue(new MyMailsubmit($request->all()));\n        return back()->with('Mail_envoye', 'ok');\n    }\n\n    public function contactus()\n    {\n        return view('contactus');\n    }\n\n    public function neighbourhoods(Request $request)\n    {\n        $q = request()->input('q');\n        $size = request()->input('size');\n        $tags = request()->input('tags');\n\n        if ($q) {\n            $neighbourhoods = neighbourhood::where('title','like','%' . $q . '%')->orWhere('tags', 'like', '%' . $q . '%')->orWhere('category', 'like', '%' . $q . '%')->orWhere('city', 'like', '%' . $q . '%')->orWhere('country', 'like', '%' . $q . '%')->paginate(8);\n        } elseif ($size) {\n            $neighbourhoods = neighbourhood::where('size', 'like', '%' . $size . '%')->paginate(8);\n        } elseif ($tags) {\n            $neighbourhoods = neighbourhood::where('tags', 'like', '%' . $tags . '%')->paginate(8);\n        } else {\n            $neighbourhoods = neighbourhood::paginate(8);\n        }\n\n        return view('neighbourhoods', compact('neighbourhoods'));\n    }\n\n    public function neighbourhoods_post(Request $request)\n    {\n        $id = $request->id;\n        $neighbourhood = neighbourhood::all();\n        $neighbourhoods = neighbourhood::where('id', '!=', null)->limit(4)\n            ->inRandomOrder()\n            ->get();\n        return view('neighbourhoods_post', compact('neighbourhood', 'neighbourhoods', 'id'));\n    }\n\n    public function streetscapes(Request $request)\n    {\n        $q = request()->input('q');\n        $tags = request()->input('tags');\n\n        if ($q) {\n            $streetscapes = Streetscape::where('title','like','%' . $q . '%')->orWhere('tags', 'like', '%' . $q . '%')->orWhere('category', 'like', '%' . $q . '%')->orWhere('city', 'like', '%' . $q . '%')->orWhere('country', 'like', '%' . $q . '%')->paginate(5);\n        } elseif ($tags) {\n            $streetscapes = Streetscape::where('title','like','%' . $tags . '%')->orWhere('tags', 'like', '%' . $tags . '%')->orWhere('category', 'like', '%' . $tags . '%')->orWhere('city', 'like', '%' . $tags . '%')->orWhere('country', 'like', '%' . $tags . '%')->paginate(5);\n        } else {\n            $streetscapes = Streetscape::paginate(5);\n        }\n\n        return view('streetscapes', compact('streetscapes'));\n    }\n\n    public function streetscapes_post(Request $request)\n    {\n        $id = $request->id;\n        $allstreetscapes = Streetscape::where('id', '!=', null)->limit(3)->inRandomOrder()->get();\n        $streetscapes = Streetscape::all();\n        return view('streetscapes_post', compact('streetscapes', 'allstreetscapes', 'id'));\n    }\n\n    public function masterplans(Request $request)\n    {\n        $q = request()->input('q');\n        $size = request()->input('size');\n        $city = request()->input('city');\n        $country = request()->input('country');\n        \n        if ($q) {\n            $masterplans = Masterplan::where('title','like','%' . $q . '%')->orWhere('tags', 'like', '%' . $q . '%')->orWhere('category', 'like', '%' . $q . '%')->orWhere('city', 'like', '%' . $q . '%')->orWhere('country', 'like', '%' . $q . '%')->paginate(10);\n        } elseif ($size) {\n            $masterplans = Masterplan::where('size', 'like', '%' . $size . '%')->paginate(10);\n        }  elseif ($request->filled('city')) \n        { \n            $masters = Masterplan::where('city', '=', $city)->paginate(10);\n            $streets = Streetscape::where('city', '=', $city)->paginate(10);\n            $neighbs = Neighbourhood::where('city', '=', $city)->paginate(10);\n        } elseif ($request->filled('country')) \n        { \n            $masters = Masterplan::where('country', '=', $country)->paginate(10);\n            $streets = Streetscape::where('country', '=', $country)->paginate(10);\n            $neighbs = Neighbourhood::where('country', '=', $country)->paginate(10);\n        } else {\n            $masterplans = Masterplan::paginate(10);\n        }\n\n        $cities = City::all();\n        $countries = Country::All();\n\n        return view('masterplans', compact('masterplans', 'cities', 'countries'));\n    }\n\n    public function masterplans_post(Request $request)\n    {\n        $id = $request->id;\n        $masterplan = Masterplan::all();\n        $masterplans = Masterplan::where('id', '!=', null)\n            ->inRandomOrder()\n            ->get();\n\n\n        return view('masterplans_post', compact('masterplan', 'masterplans', 'id'));\n    }\n\n    public function alldictionary()\n    {\n        $dictionary = Dictionary::paginate(15);\n\n        return view('dictionaries', compact('dictionary'));\n    }\n\n    public function mindscapes()\n    {\n        $mindscapes = Mindscape::paginate(10);\n\n        return view('mindscapes', compact('mindscapes'));\n    }\n\n    public function mindscapes_post(Request $request)\n    {\n        $id = $request->id;\n        $allmindscapes = Mindscape::where('id', '!=', null)->limit(3)->inRandomOrder()->get();\n        $mindscapes = Mindscape::all();\n        return view('mindscapes_post', compact('mindscapes', 'allmindscapes', 'id'));\n    }\n\n\n\n\n\n    public function allwebresources()\n    {\n        $webresources = Webresource::paginate(10);\n        return view('webresources', compact('webresources'));\n    }\n\n    public function webresources_post(Request $request)\n    {\n        $id = $request->id;\n        $webresource = Webresource::where('id', '=', $id)->get();\n        return view('webresources_post', compact('webresource'));\n    }\n\n    public function dictionaries_post(Request $request)\n    {\n        $id = $request->id;\n        $dictionaries = Dictionary::all();\n        $dictionary = Dictionary::where('id', '!=', null)\n            ->inRandomOrder()\n            ->limit(5)\n            ->get();\n        return view('dictionaries_post', compact('dictionaries', 'dictionary', 'id'));\n    }\n\n\n\n    public function read(Request $request)\n    {\n        $magazines = Magazine::where('id', '!=', null);\n\n        return view('read', [\n            'magazines' => $magazines->paginate(15),\n        ]);\n    }\n\n    static function master()\n    {\n        $master = Masterplan::all();\n        //count masterplans\n        $mastercount = $master->count();\n        return $mastercount;\n    }\n\n    static function neigh()\n    {\n        $neigh = neighbourhood::all();\n        //count neighbourhoods\n        $neighcount = $neigh->count();\n        return $neighcount;\n    }\n\n    static function street()\n    {\n        $street = Streetscape::all();\n        //count streetscapes\n        $streetcount = $street->count();\n        return $streetcount;\n    }\n\n    static function mind()\n    {\n        $mind = Mindscape::all();\n        //count mindscapes\n        $mindcount = $mind->count();\n        return $mindcount;\n    }\n\n    public function deleteUser(Request $id)\n    {\n        $thisuser = User::where('id', $id)->get();\n        $thisuser[0]->delete();\n        Session::flush();\n        Auth::logout();\n        //$request->session()->invalidate();\n        return redirect('/');\n    }\n\n    public function logout()\n    {\n        Session::flush();\n        Auth::logout();\n        //$request->session()->invalidate();\n        return view('index');\n    }\n\n    static function getUsers()\n    {\n        //retrive all users\n        $users = User::all();\n        return $users;\n    }\n\n    static function getSessions()\n    {\n        //retrive all users\n        $users_session = Session::all();\n        return $users_session;\n    }\n\n    static function getLegal()\n    {\n        return view('legal');\n    }\n\n    \n    static function association()\n    {\n        return view('association');\n    }\n\n    static function getConf()\n    {\n        return view('confidentialite');\n    }\n\n    static function cookies()\n    {\n        return view('cookies');\n    }\n\n    static function subscribe()\n    {\n        return view('subscribe');\n    }\n\n    static function work()\n    {\n        return view('work');\n    }\n\n    public function import(Request $request) \n    {\n        $request->validate([\n            'file' => 'required|mimes:xls,xlsx'\n        ]);\n\n        $file = $request->file('file');\n\n        if ($request->dataType == \"masterplans\"){\n            Excel::import(new MasterplansImport, $file);\n        } elseif ($request->dataType == \"neighbourhoods\"){\n            Excel::import(new NeighbourhoodsImport, $file);\n        } elseif ($request->dataType == \"streetscapes\"){\n            Excel::import(new StreetscapesImport, $file);\n        } elseif  ($request->dataType == \"dictionaries\"){\n            Excel::import(new DictionariesImport, $file);\n        } elseif  ($request->dataType == \"magazines\"){\n            Excel::import(new MagazinesImport, $file);\n        } elseif  ($request->dataType == \"webresources\"){\n            Excel::import(new WebresourcesImport, $file);\n        } else {\n            \\Alert::success('Error.')->flash();\n            return redirect('/admin')->with('error', 'Invalid data type.');\n        }\n        \\Alert::success('Excel data imported successfully.')->flash();\n        return redirect('/admin')->with('success', 'Data imported successfully.');\n    }\n\n\n}\n"
        }
    ]
}